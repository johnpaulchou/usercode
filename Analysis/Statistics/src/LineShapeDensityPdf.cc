#include "Analysis/Statistics/interface/LineShapeDensityPdf.h"
#include "Math/Interpolator.h"
#include "TH1F.h"

//Resonance Shape of any mass value using Interpolation technique 
//Author: Sertac Ozturk
// sertac@fnal.gov,  sertac.ozturk@cern.ch

// global variables -- shame on you, Sertac! ;)

double mass;


/////qg

double y500[50]= {146, 172, 193, 193, 200, 271, 286, 331, 375, 395, 477, 543, 613, 629, 769, 853, 908, 1033, 1123, 1265, 1391, 1474, 1522, 1657, 1821, 1880, 2076, 2135, 2478, 2764, 3100, 3376, 3592, 3832, 3812, 3430, 3045, 2493, 1954, 1417, 1083, 764, 609, 439, 381, 311, 281, 251, 222, 192};
double y700[50] = {172, 195, 202, 247, 249, 334, 368, 403, 479, 522, 630, 652, 733, 827, 929, 1067, 1195, 1377, 1482, 1605, 1764, 1859, 2055, 2092, 2213, 2441, 2517, 2887, 3189, 3598, 4070, 4403, 4878, 5220, 4993, 4577, 3687, 3053, 2198, 1493, 1034, 734, 541, 444, 359, 314, 268, 238, 211, 185};
double y1200[50] = {168, 183, 233, 239, 280, 311, 334, 410, 460, 508, 581, 643, 723, 806, 947, 986, 1162, 1328, 1490, 1513, 1661, 1819, 1951, 1917, 2074, 2281, 2400, 2780, 2990, 3386, 3926, 4668, 5247, 5685, 5452, 4709, 3660, 2436, 1633, 958, 643, 470, 349, 284, 223, 242, 173, 157, 136, 97};
double y2000[50] = {147, 189, 199, 241, 248, 286, 328, 313, 390, 420, 427, 556, 638, 684, 746, 856, 965, 1095, 1233, 1296, 1437, 1489, 1543, 1677, 1654, 1802, 2033, 2172, 2487, 2857, 3265, 3973, 4542, 4996, 4770, 3921, 2751, 1601, 961, 563, 355, 239, 182, 145, 117, 88, 81, 64, 39, 35};
double y3500[50] = { 559, 546, 576, 633, 711, 693, 698, 767, 827, 813, 930, 951, 987, 1068, 1129, 1139, 1262, 1312, 1422, 1499, 1547, 1588, 1708, 1678, 1803, 1768, 1894, 2218, 2481, 2733, 3138, 3742, 4484, 4626, 4130, 2801, 1605, 735, 336, 198, 99, 81, 46, 34, 17, 14, 14, 7, 6, 4};


////////////gg

/*
double y500[50]= {262, 274, 288, 343, 385, 433, 480, 455, 519, 523, 592, 586, 645, 693, 681, 744, 719, 772, 833, 803, 836, 795, 876, 866, 830, 914, 920, 910, 1111, 1066, 1096, 1061, 1010, 967, 814, 669, 547, 417, 294, 229, 174, 146, 135, 132, 102, 120, 114, 94, 84, 86};
double y700[50]= {197, 200, 232, 251, 280, 305, 329, 334, 335, 382, 406, 434, 387, 456, 483, 534, 467, 535, 572, 566, 586, 584, 538, 604, 602, 587, 634, 629, 702, 772, 799, 773, 756, 704, 586, 504, 324, 223, 184, 109, 107, 107, 77, 84, 63, 64, 55, 50, 48, 26};
double y1200[50]= {124, 155, 163, 186, 180, 188, 206, 238, 241, 255, 293, 282, 290, 309, 330, 325, 369, 356, 374, 394, 374, 405, 379, 403, 383, 400, 413, 508, 464, 515, 551, 611, 621, 582, 419, 312, 206, 131, 78, 61, 57, 50, 42, 37, 30, 22, 28, 20, 21, 18};
double y2000[50]= {91, 96, 100, 101, 104, 98, 106, 133, 140, 148, 140, 149, 169, 168, 152, 160, 181, 187, 216, 198, 224, 210, 203, 237, 190, 219, 225, 246, 240, 284, 342, 322, 349, 333, 270, 160, 94, 56, 45, 22, 18, 16, 10, 8, 6, 11, 10, 4, 4, 3};
double y3500[50]= {62, 51, 42, 70, 53, 82, 69, 52, 66, 64, 58, 64, 44, 60, 52, 52, 70, 74, 53, 66, 54, 68, 68, 64, 71, 64, 75, 62, 80, 76, 88, 122, 128, 117, 71, 45, 26, 9, 3, 2, 4, 1, 0, 0, 1, 0, 0, 0, 0, 1};
*/

/////////////qq
/*
double y500[50]= {24, 16, 20, 23, 28, 30, 27, 30, 36, 35, 24, 53, 37, 59, 60, 68, 94, 83, 105, 95, 128, 137, 137, 167, 164, 169, 235, 220, 258, 276, 295, 372, 413, 441, 498,543, 515, 477, 379, 271, 198, 145, 96, 63, 39, 32, 36, 19, 16, 19};
double y700[50]= {21, 15, 15, 21, 28, 36, 23, 40, 36, 46, 40, 73, 49, 61, 66, 65, 93, 108, 113, 108, 119, 160, 175, 167, 211, 210, 250, 270, 279, 333, 362, 445, 502, 609, 642, 660, 674, 540, 442, 253, 163, 118, 53, 44, 35, 30, 18, 13, 15, 11};
double y1200[50]= {38, 44, 43, 49, 44, 49, 47, 60, 58, 64, 70, 89, 71, 108, 117, 135, 167, 183, 211, 226, 257, 299, 295, 331, 309, 365, 434, 442, 475, 617, 724, 882, 1011, 1319, 1385, 1408, 1165, 931, 521, 277, 135, 86, 57, 26, 23, 23, 14, 17, 11, 14};
double y2000[50]= {42, 57, 48, 51, 58, 56, 61, 80, 92, 89, 93, 114, 125, 167, 170, 215, 206, 264, 302, 321, 342, 385, 441, 489, 464, 521, 616, 664, 759, 879, 1067, 1304, 1611, 2048, 2215, 2136, 1622, 1013, 497, 224, 112, 60, 40, 26, 21, 14, 15, 6, 4, 3};
double y3500[50]= {103, 75, 107, 96, 92, 109, 151, 124, 149, 169, 170, 201, 161, 214, 249, 277, 287, 362, 344, 407, 414, 466, 493, 537, 554, 617, 680, 769, 930, 968, 1202, 1524, 1947, 2451, 2482, 1890, 1169, 479, 183, 43, 25, 13, 8, 4, 4, 1, 2, 2, 0, 1};
*/


///// PF-qg
/*
double y500[50] ={41, 41, 62, 72, 91, 103, 145, 157, 173, 238, 292, 365, 448, 496, 526, 672, 688, 822, 912, 1049, 1066, 1144, 1198, 1322, 1418, 1457, 1485, 1680, 1887, 2082, 2392, 2678, 3003, 3179, 3199, 2896, 2397, 1874, 1396, 1032, 764, 569, 395, 321, 312, 248, 230, 183, 204, 155};
double y700[50] ={84, 103, 138, 150, 186, 204, 293, 260, 368, 395, 447, 507, 567, 600, 709, 780, 855, 975, 1128, 1196, 1253, 1436, 1413, 1542, 1556, 1712, 1785, 2050, 2284, 2524, 2740, 3388, 3704, 4021, 3961, 3557, 2969, 2216, 1564, 1066, 740, 551, 444, 343, 275, 251, 204, 186, 153, 158};
double y1200[50] ={117, 140, 147, 152, 143, 202, 223, 260, 286, 341, 363, 390, 457, 507, 581, 611, 699, 820, 879, 957, 1036, 1113, 1140, 1187, 1209, 1345, 1474, 1639, 1833, 1909, 2331, 2703, 3276, 3626, 3591, 3183, 2407, 1724, 1012, 713, 447, 321, 224, 177, 178, 159, 127, 94, 92, 84};
double y2000[50] ={142, 168, 206, 225, 246, 252, 297, 319, 344, 379, 439, 523, 557, 673, 681, 792, 895, 980, 1141, 1222, 1336, 1432, 1428, 1586, 1604, 1641, 1849, 2049, 2216, 2632, 3028, 3539, 4240, 4831, 4903, 4191, 3000, 1708, 1085, 679, 411, 278, 212, 137, 122, 106, 79, 67, 55, 45};
double y3500[50] ={464, 514, 499, 575, 581, 647, 658, 624, 740, 763, 819, 797, 911, 905, 1007, 1001, 1093, 1128, 1219, 1316, 1347, 1410, 1441, 1515, 1522, 1551, 1667, 1831, 2035, 2252, 2590, 3052, 3775, 4184, 3963, 3088, 1946, 1047, 489, 243, 144, 89, 58, 36, 27, 20, 15, 9, 4, 6};
*/

///// PF-gg
/*
double y500[50] ={14, 23, 11, 16, 26, 39, 43, 52, 65, 79, 93, 118, 97, 128, 151, 179, 181, 183, 203, 207, 244, 226, 243, 244, 225, 222, 220, 247, 267, 282, 283, 297, 314, 273, 305, 250, 186, 133, 97, 86, 75, 55, 34, 40, 38, 32, 33, 30, 34, 25};
double y700[50] ={63, 90, 103, 133, 169, 204, 233, 283, 253, 332, 327, 329, 345, 390, 403, 405, 446, 408, 486, 469, 476, 503, 490, 488, 506, 512, 477, 518, 548, 553, 629, 672, 699, 701, 609, 501, 387, 265, 191, 150, 119, 90, 86, 68, 58, 45, 58, 55, 49, 35};
double y1200[50] ={106, 137, 107, 145, 137, 166, 173, 183, 219, 217, 219, 219, 261, 262, 260, 278, 296, 285, 298, 333, 323, 337, 328, 335, 324, 334, 342, 387, 408, 399, 405, 503, 553, 540, 487, 359, 243, 138, 92, 83, 46, 49, 40, 31, 33, 23, 23, 20, 18, 13};
double y2000[50] ={63, 74, 68, 90, 89, 88, 101, 102, 111, 135, 124, 134, 120, 132, 135, 153, 147, 164, 158, 168, 189, 168, 194, 189, 167, 166, 200, 196, 216, 254, 246, 281, 292, 346, 285, 205, 97, 60, 53, 22, 18, 21, 15, 11, 8, 8, 7, 9, 2, 2};
double y3500[50] ={53, 56, 46, 57, 50, 71, 66, 66, 47, 54, 64, 58, 48, 56, 55, 50, 51, 59, 60, 64, 60, 70, 55, 61, 60, 61, 62, 65, 66, 75, 82, 105, 109, 114, 95, 61, 37, 18, 10, 4, 2, 3, 2, 0, 0, 1, 0, 0, 0, 0};
*/


///// PF-qq
/*
double y500[50] ={0, 1, 1, 0, 1, 1, 3, 1, 3, 0, 4, 1, 2, 5, 1, 3, 3, 6, 4, 3, 6, 5, 8, 4, 7, 3, 3, 5, 5, 8, 3, 5, 1, 9, 13, 6, 3, 6, 8, 9, 9, 4, 9, 9, 9, 4, 7, 7, 13, 11};
double y700[50] ={14, 9, 14, 14, 14, 24, 24, 25, 32, 32, 44, 32, 44, 47, 49, 57, 74, 67, 102, 101, 116, 116, 143, 134, 196, 217, 196, 236, 245, 318, 353, 427, 532, 609, 648, 622, 513, 371, 275, 146, 97, 78, 44, 32, 34, 13, 16, 20, 11, 10};
double y1200[50] ={37, 52, 35, 30, 42, 46, 45, 39, 48, 47, 55, 60, 78, 91, 81, 117, 125, 146, 177, 177, 230, 237, 251, 277, 275, 300, 357, 364, 412, 520, 691, 786, 976, 1176, 1366, 1260, 962, 639, 392, 198, 125, 83, 47, 33, 27, 25, 14, 10, 7, 8};
double y2000[50] ={41, 45, 49, 54, 44, 60, 54, 65, 74, 73, 80, 88, 102, 118, 136, 172, 175, 197, 234, 269, 309, 320, 349, 390, 405, 453, 494, 583, 623, 746, 901, 1116, 1491, 1817, 2074, 1973, 1455, 844, 417, 254, 120, 61, 43, 25, 13, 20, 18, 8, 5, 2};
double y3500[50] ={86, 87, 93, 87, 95, 105, 141, 126, 150, 145, 144, 186, 173, 175, 232, 233, 265, 325, 327, 371, 387, 418, 424, 487, 513, 583, 617, 690, 832, 882, 1105, 1384, 1774, 2159, 2471, 2103, 1345, 705, 268, 110, 46, 19, 14, 7, 6, 2, 2, 3, 1, 1};
*/

///// FAT11 - qg
/*
double y500[50] ={27, 30, 41, 53, 52, 74, 106, 117, 114, 167, 204, 279, 295, 357, 375, 438, 486, 615, 625, 731, 805, 872, 883, 992, 1061, 1119, 1121, 1340, 1494, 1720, 2047, 2425, 2875, 3240, 3488, 3312, 3032, 2569, 1925, 1555, 1229, 948, 739, 553, 469, 427, 369, 292, 291, 245};
double y700[50] ={69, 79, 118, 120, 150, 138, 213, 206, 260, 290, 339, 406, 421, 451, 504, 560, 653, 728, 812, 878, 951, 993, 1026, 1119, 1192, 1250, 1344, 1572, 1795, 2043, 2314, 3019, 3638, 4157, 4541, 4438, 3806, 3025, 2293, 1661, 1243, 983, 723, 596, 490, 430, 344, 303, 243, 236};
double y1200[50] ={94, 135, 134, 133, 121, 161, 178, 186, 220, 258, 284, 301, 360, 345, 421, 453, 515, 617, 678, 693, 730, 795, 808, 897, 898, 1012, 1102, 1238, 1421, 1601, 2024, 2460, 3174, 3749, 4050, 4034, 3216, 2453, 1653, 1155, 786, 599, 462, 352, 298, 287, 214, 189, 168, 123};
double y2000[50] ={118, 153, 161, 185, 200, 230, 237, 260, 268, 308, 359, 408, 415, 471, 541, 607, 655, 751, 814, 915, 932, 1017, 1100, 1137, 1177, 1259, 1415, 1589, 1790, 2109, 2553, 3223, 4164, 5153, 5693, 5516, 4157, 2728, 1772, 1156, 783, 563, 390, 357, 251, 199, 184, 147, 124, 89};
double y3500[50] ={420, 470, 449, 498, 524, 609, 615, 527, 644, 694, 712, 680, 766, 799, 852, 913, 903, 968, 1033, 1026, 1070, 1167, 1189, 1139, 1308, 1330, 1421, 1499, 1687, 1996, 2259, 2818, 3864, 4728, 4922, 4151, 2967, 1753, 1026, 544, 341, 234, 147, 80, 73, 51, 47, 31, 13, 16};
*/

///// FAT11 - gg
/*
double y500[50] ={8, 17, 11, 8, 23, 25, 22, 28, 37, 55, 53, 83, 77, 109, 102, 120, 127, 139, 148, 152, 183, 185, 198, 209, 193, 208, 206, 226, 236, 276, 243, 298, 328, 336, 344, 291, 269, 213, 166, 154, 138, 103, 59, 56, 72, 47, 62, 45, 33, 39};
double y700[50] ={45, 60, 83, 93, 117, 133, 181, 217, 209, 236, 268, 275, 260, 295, 346, 340, 362, 333, 365, 367, 381, 430, 406, 435, 401, 438, 418, 460, 480, 505, 588, 636, 735, 800, 787, 737, 611, 445, 358, 298, 256, 172, 150, 129, 110, 87, 97, 77, 61, 56};
double y1200[50] ={83, 104, 103, 124, 93, 132, 145, 173, 186, 173, 180, 171, 211, 207, 208, 215, 239, 254, 238, 275, 273, 269, 278, 264, 264, 313, 277, 309, 342, 361, 382, 475, 558, 661, 679, 590, 422, 273, 200, 125, 118, 108, 83, 85, 54, 43, 46, 34, 34, 25};
double y2000[50] ={59, 56, 58, 67, 82, 81, 76, 93, 85, 108, 104, 108, 115, 116, 111, 113, 141, 134, 147, 117, 152, 128, 127, 145, 164, 157, 135, 164, 183, 225, 231, 261, 311, 392, 423, 328, 214, 121, 116, 83, 58, 45, 41, 26, 18, 25, 17, 22, 12, 5};
double y3500[50] ={46, 40, 52, 60, 53, 61, 71, 54, 53, 44, 56, 53, 43, 58, 44, 58, 46, 42, 49, 55, 50, 57, 58, 56, 46, 58, 52, 54, 54, 64, 70, 104, 127, 135, 134, 108, 77, 53, 27, 20, 11, 6, 6, 4, 3, 1, 2, 1, 0, 1};
*/

///// FAT11 - qq

/*
double y500[50] ={0, 1, 1, 0, 1, 1, 3, 1, 2, 0, 4, 1, 1, 4, 0, 2, 4, 3, 0, 2, 6, 2, 7, 3, 8, 4, 5, 5, 3, 4, 2, 6, 2, 4, 11, 5, 2, 7, 4, 8, 10, 8, 12, 8, 7, 6, 11, 5, 4, 5};
double y700[50] ={12, 7, 11, 14, 10, 15, 18, 24, 28, 24, 34, 28, 38, 42, 38, 33, 52, 54, 81, 70, 90, 79, 107, 90, 150, 144, 167, 181, 201, 262, 290, 371, 508, 604, 688, 689, 585, 499, 340, 219, 162, 125, 82, 69, 50, 28, 30, 37, 25, 17};
double y1200[50] ={34, 50, 37, 39, 37, 36, 44, 40, 30, 47, 50, 50, 53, 63, 66, 78, 97, 114, 132, 135, 158, 155, 174, 210, 201, 230, 290, 307, 309, 417, 550, 672, 914, 1207, 1429, 1461, 1254, 817, 549, 350, 196, 152, 86, 61, 59, 43, 36, 27, 14, 16};
double y2000[50] ={33, 39, 40, 54, 36, 57, 46, 59, 57, 53, 79, 72, 82, 83, 106, 118, 157, 173, 180, 188, 247, 256, 240, 286, 315, 353, 334, 477, 504, 607, 763, 950, 1410, 1815, 2241, 2297, 1799, 1141, 660, 397, 212, 117, 104, 68, 36, 44, 24, 21, 17, 12};
double y3500[50] ={80, 80, 101, 78, 90, 94, 113, 117, 143, 134, 128, 153, 160, 163, 192, 201, 226, 268, 273, 292, 310, 348, 314, 383, 419, 438, 543, 557, 691, 786, 929, 1253, 1649, 2243, 2814, 2561, 1803, 1009, 429, 179, 108, 42, 29, 15, 9, 5, 4, 4, 1, 1};
*/
double bincenter[50]={
  0.31,  0.33,  0.35,  0.37,  0.39,  0.41,  0.43,  0.45,  0.47,  0.49,
  0.51,  0.53,  0.55,  0.57,  0.59,  0.61,  0.63,  0.65,  0.67,  0.69,
  0.71,  0.73,  0.75,  0.77,  0.79,  0.81,  0.83,  0.85,  0.87,  0.89,
  0.91,  0.93,  0.95,  0.97,  0.99,  1.01,  1.03,  1.05,  1.07,  1.09,
  1.11,  1.13,  1.15,  1.17,  1.19,  1.21,  1.23,  1.25,  1.27,  1.29};


std::vector<double> v;

double mqstar[5] = {500., 700., 1200., 2000., 3500.};

const int nMassBins = 103;
double massBoundaries[nMassBins+1] = {1, 3, 6, 10, 16, 23, 31, 40, 50, 61, 74, 88, 103, 119, 137, 156, 176, 197, 220, 244, 270, 296, 325,
				      354, 386, 419, 453, 489, 526, 565, 606, 649, 693, 740, 788, 838, 890, 944, 1000, 1058, 1118, 1181, 1246, 1313, 1383, 1455, 1530, 1607, 1687,
				      1770, 1856, 1945, 2037, 2132, 2231, 2332, 2438, 2546, 2659, 2775, 2895, 3019, 3147, 3279, 3416, 3558, 3704, 3854, 4010, 4171, 4337, 4509,
				      4686, 4869, 5058, 5253, 5455, 5663, 5877, 6099, 6328, 6564, 6808, 7060, 7320, 7589, 7866, 8152, 8447, 8752, 9067, 9391, 9726, 10072, 10430, 
				      10798, 11179, 11571, 11977, 12395, 12827, 13272, 13732, 14000};

double binwidth[nMassBins+1] = {2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 26, 26, 29, 29, 32, 33, 34, 36, 37, 39, 41, 43, 
				44, 47, 48, 50, 52, 54, 56, 58, 60, 63, 65, 67, 70, 72, 75, 77, 80, 83, 86, 89, 92, 95, 99, 101, 106, 108, 113, 116, 120, 124, 128, 132, 137, 142, 146,
				150, 156, 161, 166, 172, 177, 183, 189, 195, 202, 208, 214, 222, 229, 236, 244, 252, 260, 269, 277, 286, 295, 305, 315, 324, 335, 346, 358, 368, 381, 
				392, 406, 418, 432, 445, 460, 268};

double massnew[nMassBins+1];
double FoundQstarBinnedProb[nMassBins+1];

const unsigned int n = 50;
double x[n];
double y[n];
double f[n];


void LineShapeDensity_pdf(double mass){
  setArray(mass);
}


void setArray (double mass){ 
  for(int ind=0;ind<nMassBins; ind++){
    double bin_width = -1;		 
    double peak_low = 0.31;
    double peak_high = 1.27;
    double mjj = (massBoundaries[ind]+massBoundaries[ind+1])/2;
    //	  cout<<ind<<"\t "<<mjj<<"\t "<<peak_low*mass<<endl;
    //if (mjj<0.3*mass || mjj>1.3*mass) {
    if (mjj<peak_low*mass || mjj>peak_high*mass) {
      FoundQstarBinnedProb[ind] = 0.;
      // Create a vector and fill it with variable x bins according to entered mass value
    }
    else {
	for(int i=0;i<103; i++){
	  massnew[i] = massBoundaries[i]/mass;
	  if (massBoundaries[i]<=mjj && massBoundaries[i+1]>=mjj) 
	    bin_width = binwidth[i];
	  if (massnew[i]<=1.32 && massnew[i]>=0.28){ // x distribution is from peak_low to peak_high
	    //if (massnew[i]<=peak_high && massnew[i]>=peak_low){ // x distribution is from peak_low to peak_high
	    v.push_back(massnew[i]);
	  }
	}
	
        const unsigned int s = v.size();
	
	// Definition of arrays with variable bins 
	double bins[1000]; // variable bins for x distribution
	double m[1000]; // variable mass bins for dijet mass distribution
	double dndm[1000];
	double prob[1000];
	
	
	// Fill the bin values to array
	for(unsigned int j=0; j<v.size(); j++){
	  bins[j] = v[j];
	  m[j] = v[j] * mass;
	}
	
	// Definition of histograms
	TH1F* h_new2 = new TH1F("h_new2","with variale bins2",s-1 , m); // Histogram for dijet mass distribution with variable mass bins
	
	if(mass == mqstar[0]){ // If mass = 0.5 TeV
	  for(unsigned int k=0; k<n; k++){
	    x[k] = bincenter[k];
	    y[k] = y500[k];
	  }
	}
	
	if(mass == mqstar[1]){ // If mass = 0.7 TeV
	  for(unsigned int k=0; k<n; k++){
	    x[k] = bincenter[k];
	    y[k] = y700[k];}
	}
	
	if(mass == mqstar[2]){ // If mass = 1.2 TeV
	  for(unsigned int k=0; k<n; k++){
	    x[k] = bincenter[k];
	    y[k] = y1200[k];}
	}
	
	if(mass == mqstar[3]){ // If mass = 2 TeV
	  for(unsigned int k=0; k<n; k++){
	    x[k] = bincenter[k];
	    y[k] = y2000[k];}
	}
	
	if(mass == mqstar[4]){ // If mass = 3.5 TeV
	  for(unsigned int k=0; k<n; k++){
	    x[k] = bincenter[k];
	    y[k] = y3500[k];}
	}
	
	
	// Calculate and create new x distribution with fixed bins at entered mass value which is between 0.5 TeV and 0.7 TeV
	if((mass > mqstar[0] && mass < mqstar[1]) || mass < mqstar[0]){ 
	  for(unsigned int k=0; k<n; k++){
	    double bincont1 = y500[k];
	    double bincont2 = y700[k];
	    double Mjj1 = mqstar[0];
	    double Mjj2 = mqstar[1];
	    double Mq = mass;
	    double norm = (Mq - Mjj1)/(Mjj2 - Mjj1);
	    double eff = bincont2 - bincont1;
	    double neff = eff * norm;
	    double mqstar1 = bincont1 + neff;
	    y[k] = mqstar1;
	    x[k] = bincenter[k];}
	}
	
	// Calculate and create new x distribution with fixed bins at entered mass value which is between 0.7 TeV and 1.2 TeV. 
	if(mass > mqstar[1] && mass < mqstar[2]){
	  for(unsigned int k=0; k<n; k++){
	    double bincont1 = y700[k];
	    double bincont2 = y1200[k];
	    double Mjj1 = mqstar[1];
	    double Mjj2 = mqstar[2];
	    double Mq = mass;
	    double norm = (Mq - Mjj1)/(Mjj2 - Mjj1);
	    double eff = bincont2 - bincont1;
	    double neff = eff * norm;
	    double mqstar1 = bincont1 + neff;
	    y[k] = mqstar1;
	    x[k] = bincenter[k];}
	}
	
	// Calculate and create new x distribution with fixed bins at entered mass value which is between 1.2 TeV and 2 TeV. 
	if(mass > mqstar[2] && mass < mqstar[3]){
	  for(unsigned int k=0; k<n; k++){
	    double bincont1 = y1200[k];
	    double bincont2 = y2000[k];
	    double Mjj1 = mqstar[2];
	    double Mjj2 = mqstar[3];
	    double Mq = mass;
	    double norm = (Mq - Mjj1)/(Mjj2 - Mjj1);
	    double eff = bincont2 - bincont1;
	    double neff = eff * norm;
	    double mqstar1 = bincont1 + neff;
	    y[k] = mqstar1;
	    x[k] = bincenter[k];}
	}
	
	// Calculate and create new x distribution with fixed bins at entered mass value which is between 2 TeV and 3.5 TeV. 
	if((mass > mqstar[3] && mass < mqstar[4]) || mass > mqstar[4]){
	  for(unsigned int k=0; k<n; k++){
	    double bincont1 = y2000[k];
	    double bincont2 = y3500[k];
	    double Mjj1 = mqstar[3];
	    double Mjj2 = mqstar[4];
	    double Mq = mass;
	    double norm = (Mq - Mjj1)/(Mjj2 - Mjj1);
	    double eff = bincont2 - bincont1;
	    double neff = eff * norm;
	    double mqstar1 = bincont1 + neff;
	    y[k] = mqstar1;
	    x[k] = bincenter[k];}
	}
	
	// Interpolation tecnique is used to convert distribution in x to distribution in dijet mass with variable bins
	ROOT::Math::Interpolator inter(n, ROOT::Math::Interpolation::kCSPLINE); // If CSPLINE is not valid, please use kCSPLINE
	inter.SetData(n, x, y);
	
	// Generate the new distribution in x with variable bins
	for(unsigned int t=0; t<n; t++)
	  f[t] = inter.Eval(x[t]);
	
	//  int bin_number = h_new->GetNbinsX();
	for(unsigned int z=0; z<s; z++){
	  double bin = 0;
	  if(v[z]>peak_low && v[z]<peak_high && v[z+1]>peak_low && v[z+1]<peak_high)
	    bin = inter.Integ(v[z], v[z+1]); 
	  
	  dndm[z] = bin;
	  h_new2->SetBinContent(z+1,bin); // histogram in dijet mass distribution with variable bins
	}
	
	v.clear();
	
	double integ = h_new2->Integral();
	h_new2->Delete();
	
	for(unsigned int p=0; p<s; p++){
	  double nor = dndm[p] / integ;
	  prob[p] = nor;
	  if(m[p]<mjj && m[p+1]>=mjj){
	    FoundQstarBinnedProb[ind] = prob[p] / bin_width;	
	    ///cout << "bin_width=" << bin_width << endl;
	  }
	}
    }
    //	 cout<<ind<<"\t mjj: "<<mjj<<"\t prob: "<<FoundQstarBinnedProb[ind]<<endl;
  }	
}


// This gets the qstar binned probability faster than the original rountine
double FastQstarBinnedProb(double mjj )
{
  int bin=0;
  int binFound=0;
  for(int i=0;i<nMassBins && binFound==0; i++){
    if(massBoundaries[i+1]>mjj){
      binFound=1;
      bin=i;
    }
  }
  return FoundQstarBinnedProb[bin];
}

